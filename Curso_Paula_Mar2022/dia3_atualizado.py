# -*- coding: utf-8 -*-
"""dia3_atualizado.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1D96eaEzhs0qsgtz1XC6RLnqoUyq9ukhx

# Curso Python

## Dia 3 - Fazendo plotes

#### 1. Plotes básicos
"""

# Commented out IPython magic to ensure Python compatibility.
# Importando as bibliotecas
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
# %matplotlib inline   
# Mostra o gráfico

# Vamos criar uma lista numérica.
numeros = np.arange(50, 325, 25)
print(numeros)

# O plote mais simples de todos
plt.plot(numeros)

plt.plot([0,1,2,3,4,5,6,7,8,9,10],numeros)

# Criei lista bagunçada
numeros_a = [225, 150, 75, 50, 200, 250, 125, 300, 100, 275, 175]

# O plote mais simples de todos
plt.plot(numeros_a)

# Indicando o tipo de linha

plt.plot(numeros_a, '-')

# Indicando o tipo de linha

plt.plot(numeros_a, '.')

# Indicando o tipo de linha

plt.plot(numeros_a, 'o')

plt.plot(numeros_a, '-')
plt.plot(numeros_a, 'o')

plt.plot(numeros_a, '^')

plt.plot(numeros_a, '*')

"""#### 2. Cores e estilo dos plotes"""

# Colocando gráfico da cor preta
plt.plot(numeros_a, '-ok')  #black

# Mudando as cores
plt.plot(numeros_a, '-r')  #red
plt.plot(numeros_a, 'og')  #green

"""### Link com várias cores disponíveis do matplotlib

https://matplotlib.org/stable/gallery/color/named_colors.html
"""

plt.plot(numeros_a, '-', color = 'deeppink')
plt.plot(numeros_a, 'o', color = 'indigo')

# Fixa o tamanho do gráfico
plt.figure(figsize=(5,10))
plt.plot(numeros_a, '-', color = 'deeppink')

# Colocando título no gráfico 
plt.figure(figsize=(10,5))
plt.plot(numeros_a, '-', color = 'deeppink')
plt.title('Meu primeiro gráfico', fontweight='bold')

#Nomeando os eixos e definindo os limites dos eixos
plt.figure(figsize=(10,5))
plt.plot(numeros_a, '-', color = 'deeppink')
plt.title('Meu primeiro gráfico', fontweight='bold')
plt.xlabel("Índices")
plt.ylabel("Números")
plt.xlim(0,10)
plt.ylim(0,350)

#Aumentando as letras e colocando a grade de fundo 
plt.figure(figsize=(10,5))
plt.plot(numeros_a, '-', color = 'deeppink')
plt.title('Meu primeiro gráfico', fontweight='bold', fontsize = 16)
plt.xlabel("Índices", fontsize = 14)
plt.ylabel("Números", fontsize = 14)
plt.xlim(0,10)
plt.ylim(0,350)
plt.grid()

#Deixando a linha mais grossa
plt.figure(figsize=(10,5))
plt.plot(numeros_a, '-', color = 'deeppink', linewidth=5.0)
plt.title('Meu primeiro gráfico', fontweight='bold', fontsize = 16)
plt.xlabel("Índices", fontsize = 14)
plt.ylabel("Números", fontsize = 14)
plt.xlim(0,10)
plt.ylim(0,350)
plt.grid()

# Aumentando o marcador pontual
plt.figure(figsize=(10,5))
plt.plot(numeros_a, '-', color = 'deeppink', linewidth=5.0)
plt.plot(numeros_a, 'o', color = 'indigo', markersize=10.0) 
plt.title('Meu primeiro gráfico', fontweight='bold', fontsize = 16)
plt.xlabel("Índices", fontsize = 14)
plt.ylabel("Números", fontsize = 14)
plt.xlim(0,10)
plt.ylim(0,350)
plt.grid()

# Colocando legenda
plt.figure(figsize=(10,5))
plt.plot(numeros_a, '-', color = 'deeppink', linewidth=5.0, label = 'linha')
plt.plot(numeros_a, 'o', color = 'indigo', markersize=10.0, label = 'círculo') 
plt.title('Meu primeiro gráfico', fontweight='bold', fontsize = 16)
plt.xlabel("Índices", fontsize = 14)
plt.ylabel("Números", fontsize = 14)
plt.xlim(0,10)
plt.ylim(0,350)
plt.grid()
plt.legend()

# Adicionando informação da média ao gráfico

media = np.mean(numeros_a)
print("Média = ", media)

# Adicionando informação (plt.text)

plt.figure(figsize=(10,5))
plt.plot(numeros_a, '-', color = 'deeppink', linewidth=5.0, label = 'linha')
plt.plot(numeros_a, 'o', color = 'indigo', markersize=10.0, label = 'círculo') 
plt.title('Meu primeiro gráfico', fontweight='bold', fontsize = 16)
plt.xlabel("Índices", fontsize = 14)
plt.ylabel("Números", fontsize = 14)
plt.xlim(0,10)
plt.ylim(0,350)
plt.text(2, 300, media)
plt.grid()
plt.legend()

# Adicionando informação

plt.figure(figsize=(10,5))
plt.plot(numeros_a, '-', color = 'deeppink', linewidth=5.0, label = 'linha')
plt.plot(numeros_a, 'o', color = 'indigo', markersize=10.0, label = 'círculo') 
plt.title('Meu primeiro gráfico', fontweight='bold', fontsize = 16)
plt.xlabel("Índices", fontsize = 14)
plt.ylabel("Números", fontsize = 14)
plt.xlim(0,10)
plt.ylim(0,350)
plt.text(2, 300, media, fontsize=14, fontweight='bold')
plt.grid()
plt.legend()

# Adicionando informação

plt.figure(figsize=(10,5))
plt.plot(numeros_a, '-', color = 'deeppink', linewidth=5.0, label = 'linha')
plt.plot(numeros_a, 'o', color = 'indigo', markersize=10.0, label = 'círculo') 
plt.title('Meu primeiro gráfico', fontweight='bold', fontsize = 16)
plt.xlabel("Índices", fontsize = 14)
plt.ylabel("Números", fontsize = 14)
plt.xlim(0,10)
plt.ylim(0,350)
box = dict(boxstyle='square', facecolor='grey')
plt.text(2, 300, 'Média = '+media, fontsize=14, fontweight='bold', bbox=box)
plt.grid()
plt.legend()

# Adicionando informação

plt.figure(figsize=(10,5))
plt.plot(numeros_a, '-', color = 'deeppink', linewidth=5.0, label = 'linha')
plt.plot(numeros_a, 'o', color = 'indigo', markersize=10.0, label = 'círculo') 
plt.title('Meu primeiro gráfico', fontweight='bold', fontsize = 16)
plt.xlabel("Índices", fontsize = 14)
plt.ylabel("Números", fontsize = 14)
plt.xlim(0,10)
plt.ylim(0,350)
box = dict(boxstyle='square', facecolor='grey')
plt.text(2, 300, 'Média = '+str(media), fontsize=14, fontweight='bold', bbox=box)
plt.grid()
plt.legend()

for i in range(len(numeros_a)):
    print(i, numeros_a[i])

# Adicionando o valor a cada ponto de plot

plt.figure(figsize=(10,5))
plt.plot(numeros_a, '-', color = 'deeppink', linewidth=5.0, label = 'linha')
plt.plot(numeros_a, 'o', color = 'indigo', markersize=10.0, label = 'círculo') 
plt.title('Meu primeiro gráfico', fontweight='bold', fontsize = 16)
plt.xlabel("Índices", fontsize = 14)
plt.ylabel("Números", fontsize = 14)
plt.xlim(0,10)
plt.ylim(0,350)
box = dict(boxstyle='square', facecolor='grey')
plt.text(2, 300, 'Média = '+str(media), fontsize=14, fontweight='bold', bbox=box)
plt.grid()
plt.legend()
for i in range(len(numeros_a)):
    #print(i, numeros_a[i])
    plt.text(i,numeros_a[i], numeros_a[i],ha='center')

# Adicionando o valor a cada ponto de plot

plt.figure(figsize=(10,5))
plt.plot(numeros_a, '-', color = 'deeppink', linewidth=5.0, label = 'linha')
plt.plot(numeros_a, 'o', color = 'indigo', markersize=10.0, label = 'círculo') 
plt.title('Meu primeiro gráfico', fontweight='bold', fontsize = 16)
plt.xlabel("Índices", fontsize = 14)
plt.ylabel("Números", fontsize = 14)
plt.xlim(0,10)
plt.ylim(0,350)
box = dict(boxstyle='square', facecolor='grey')
plt.text(2, 300, 'Média = '+str(media), fontsize=14, fontweight='bold', bbox=box)
plt.grid()
plt.legend()
for i in range(len(numeros_a)):
    #print(i, numeros_a[i])
    plt.text(i,numeros_a[i]+5, numeros_a[i],ha='center',va='bottom', fontweight='bold', fontsize=12)

path = 'C:\\Users\\Paula\\Desktop\\curso-python\\'
print(path)

path+'figs\\'

'Média = '+str(media)

# Salvando o gráfico
plt.figure(figsize=(10,5))
plt.plot(numeros_a, '-', color = 'deeppink', linewidth=5.0, label = 'linha')
plt.plot(numeros_a, 'o', color = 'indigo', markersize=10.0, label = 'círculo') 
plt.title('Meu primeiro gráfico', fontweight='bold', fontsize = 16)
plt.xlabel("Índices", fontsize = 14)
plt.ylabel("Números", fontsize = 14)
plt.xlim(0,10)
plt.ylim(0,350)
box = dict(boxstyle='square', facecolor='grey')
plt.text(2, 300, 'Média = '+str(media), fontsize=14, fontweight='bold', bbox=box)
plt.grid()
plt.legend()
for i in range(len(numeros_a)):
    #print(i, numeros_a[i])
    plt.text(i,numeros_a[i]+5, numeros_a[i],ha='center',va='bottom', fontweight='bold', fontsize=12)
plt.savefig(path+'figs\\meuprimeirografico.png')

"""#### 3. Gráfico de barras"""

# Definindo nova lista
# porcentagem de pessoas que gostam das respectivas cores

porcentagem = [35, 5, 25, 15, 20]

cores = ["Azul", "Verde", "Rosa", "Amarelo", "Vermelho"]

print(porcentagem)
print(cores)

plt.figure(figsize=(10,5))
plt.bar(cores, porcentagem)

plt.figure(figsize=(10,5))
plt.bar(cores, porcentagem)
plt.title('Gráfico de barras', fontweight='bold', fontsize = 16)
plt.xlabel("Cores", fontsize = 14)
plt.ylabel("Porcentagem", fontsize = 14)

plt.figure(figsize=(10,5))
plt.bar(cores, porcentagem, color='orange')
plt.title('Gráfico de barras', fontweight='bold', fontsize = 16)
plt.xlabel("Cores", fontsize = 14)
plt.ylabel("Porcentagem", fontsize = 14)

plt.figure(figsize=(10,5))
plt.bar(cores, porcentagem, color='orange')
plt.title('Gráfico de barras', fontweight='bold', fontsize = 16)
plt.xlabel("Cores", fontsize = 14)
plt.ylabel("Porcentagem", fontsize = 14)
plt.savefig(path+'figs\\graficodebarras.png')

plt.figure(figsize=(10,5))
plt.bar(porcentagem, cores, color='magenta')
plt.title('Gráfico de barras', fontweight='bold', fontsize = 16)
plt.xlabel("Cores", fontsize = 14)
plt.ylabel("Porcentagem", fontsize = 14)

# Barras horizontal (plt.barh)

plt.figure(figsize=(10,5))
plt.barh(cores, porcentagem, color='red')
plt.title('Gráfico de barras horizontais', fontweight='bold', fontsize = 16)
plt.ylabel("Cores", fontsize = 14)
plt.xlabel("Porcentagem", fontsize = 14)

# Barras horizontal (plt.barh) - pintando as cores das barras

plt.figure(figsize=(10,5))
plt.barh(cores, porcentagem, color=['red', 'yellow','pink', 'green','blue'])  #Atenção ordem trocada!!!!
plt.title('Gráfico de barras horizontais', fontweight='bold', fontsize = 16)
plt.ylabel("Cores", fontsize = 14)
plt.xlabel("Porcentagem", fontsize = 14)

# Barras horizontal (plt.barh) - pintando as cores das barras

plt.figure(figsize=(10,5))
plt.barh(cores, porcentagem, color=['blue','green','pink','yellow','red'])
plt.title('Gráfico de barras horizontais', fontweight='bold', fontsize = 16)
plt.ylabel("Cores", fontsize = 14)
plt.xlabel("Porcentagem", fontsize = 14)
plt.savefig(path+'figs\\graficodebarras_horizontais.png')

"""#### 4. Gráfico de pizza  (Pie chart)"""

# No pie chart os pedaços são ordenados e plotados no sentido anti-horário

# Vamos usar os mesmos dados do gráfico de barra
print("Porcentagem: ", porcentagem)
print("Cores: ", cores)

plt.pie(porcentagem, labels=cores)
plt.axis('equal') # Assegura de que o gráfico seja um círculo

plt.pie(porcentagem, labels=cores, startangle=90)  # Começa a plotar em 90 graus, no sentido anti-horário
plt.axis('equal') # Assegura de que o gráfico seja um círculo

# Para destacar uma das cores

explode = (0.1, 0, 0, 0, 0) #tuple

plt.pie(porcentagem, labels=cores, startangle=90, explode=explode) 
plt.axis('equal')

# Inserindo sombra

explode = (0.1, 0, 0, 0, 0)

plt.pie(porcentagem, labels=cores, startangle=90, explode=explode, shadow = True) 
plt.axis('equal')

# Inserindo a porcentagem

explode = (0.1, 0, 0, 0, 0)

plt.pie(porcentagem, labels=cores, startangle=90, explode=explode, shadow = True, autopct = '%2.1f%%') 
plt.axis('equal')

# Inserindo o título

explode = (0.1, 0, 0, 0, 0)

plt.pie(porcentagem, labels=cores, startangle=90, explode=explode, shadow = True, autopct = '%2.1f%%') 
plt.axis('equal')
plt.title('Meu gráfico de pizza', fontweight="bold")

# Mudando as cores

explode = (0.1, 0, 0, 0, 0)

plt.pie(porcentagem, labels=cores, startangle=90, explode=explode, shadow = True, autopct = '%2.1f%%',
        colors=['blue','green','magenta','yellow','red']) 
plt.axis('equal')
plt.title('Meu gráfico de pizza', fontweight="bold")

# Mudando a apresentação da legenda e tirando o nome das cores do gráfico

explode = (0.1, 0, 0, 0, 0)

plt.pie(porcentagem, labels=['','','','',''], startangle=90, explode=explode, shadow = True, autopct = '%2.1f%%',
        colors=['blue','green','magenta','yellow','red']) 
plt.axis('equal')
plt.title('Meu gráfico de pizza', fontweight="bold")
plt.legend(labels=cores)

# Mudando a cor dos números
explode = (0.1, 0, 0, 0, 0)
wedges, texts, autotexts = plt.pie(porcentagem, labels=['','','','',''], startangle=90, explode=explode, shadow = True, autopct = '%2.1f%%',
        colors=['blue','green','magenta','yellow','red'])
plt.axis('equal')
plt.title('Meu gráfico de pizza', fontweight="bold")
plt.legend(labels=cores)
plt.setp(autotexts, size=16, weight="bold", color='gray')

"""###### Como mudar a cor dos números:
https://matplotlib.org/3.1.0/gallery/pie_and_polar_charts/pie_and_donut_labels.html#sphx-glr-gallery-pie-and-polar-charts-pie-and-donut-labels-py
"""

# salvando

explode = (0.1, 0, 0, 0, 0)

wedges, texts, autotexts = plt.pie(porcentagem, labels=['','','','',''], startangle=90, explode=explode, shadow = True, autopct = '%2.1f%%',
        colors=['blue','green','magenta','yellow','red'])
plt.axis('equal')
plt.title('Meu gráfico de pizza', fontweight="bold")
plt.legend(labels=cores)
plt.setp(autotexts, size=14, weight="bold")

plt.savefig(path+'figs\\pie_chart.png')

"""#### 5. Histograma"""

# Criando lista com 25 números aleatórios entre 1, 50
aleat = [3, 12, 39, 10, 33, 20, 35, 26, 29, 18, 45, 37, 30, 23, 15, 34, 27, 38, 8, 25, 2, 41, 6, 31, 5]

print(aleat)

#Colocando em ordem crescente
aleat.sort()
print(aleat)
print(len(aleat))

plt.figure(figsize=(8,10))
plt.hist(aleat)

# Definindo a quantidade de bins (número de barras)
plt.figure(figsize=(8,10))
plt.hist(aleat, bins=5)

print(aleat)

# Cria lista de 10 em 10
print(np.arange(0,60,10))

# Definindo intervalo de bins (classe) a cada 10
plt.figure(figsize=(8,10))
plt.hist(aleat, bins=np.arange(0,60,10))

# Definindo intervalo de bins (classe) a cada 10
plt.figure(figsize=(8,10))
plt.hist(aleat, bins=np.arange(0,60,10), color='blue')
plt.title('Histograma', fontweight='bold', fontsize = 16)
plt.xlabel("Classes", fontsize = 14)
plt.ylabel("Frequência", fontsize = 14)
plt.savefig(path+'figs\\histograma.png')

"""#### 6. Criando subplotes"""

# Criando uma lista

x1 = np.arange(0,405,45)
print(x1)

# Quero representar 2 voltas em um círculo trigonométrico

print(360*2)

# Criando uma lista

x1 = np.arange(0,765,30)
print(x1)

np.pi

# Passando de graus para radianos
# multiplico por pi/180

x = x1 * (np.pi/180)
y = np.cos(x)

print("Lista em graus:", x1)
print("Lista em radianos:", x)
print("Cosseno:", y)

# Passando de graus para radianos
# multiplico por pi/180

x = x1 * (np.pi/180)
y = np.cos(x)

print("Lista em graus:", x1)
print("Lista em radianos:", x)
print("Cosseno:", np.round(y, 3))

# Exemplo usando 1 subplot

fig, ax = plt.subplots()
ax.plot(x, y, '-ob')
#ax.plot(x, y, 'ob')
ax.set_title("Cosseno", fontweight='bold')

# Criando o seno dos ângulos
z = np.sin(x)
print(z)

print(np.round(z,3))

# Exemplo usando 2 subplots

fig, ax = plt.subplots(1,2)

# Cosseno
ax[0].plot(x, y, '-b')
ax[0].plot(x, y, 'ob')
ax[0].set_title("Cosseno", fontweight='bold')

# Seno
ax[1].plot(x, z, '-r')
ax[1].plot(x, z, 'or')
ax[1].set_title("Seno", fontweight='bold')

# Exemplo usando 2 subplots

fig, ax = plt.subplots(2,1)

# Cosseno
ax[0].plot(x, y, '-b')
ax[0].plot(x, y, 'ob')
ax[0].set_title("Cosseno", fontweight='bold')

# Seno
ax[1].plot(x, z, '-r')
ax[1].plot(x, z, 'or')
ax[1].set_title("Seno", fontweight='bold')

# Exemplo usando 2 subplots   -----> Outra maneira!

fig, (ax1, ax2) = plt.subplots(2)

# Cosseno
ax1.plot(x, y, '-b')
ax1.plot(x, y, 'ob')
ax1.set_title("Cosseno", fontweight='bold')

# Seno
ax2.plot(x, z, '-r')
ax2.plot(x, z, 'or')
ax2.set_title("Seno", fontweight='bold')

# Exemplo usando 2 subplots - Adicionando detalhes

fig, (ax1, ax2) = plt.subplots(2, figsize=(10,7))

fig.suptitle("Funções trigonométricas", fontsize=16, fontweight='bold')

# Cosseno
ax1.plot(x, y, '-b')
ax1.plot(x, y, 'ob')
ax1.set_title("Cosseno", fontweight='bold')
ax1.grid()

# Seno
ax2.plot(x, z, '-r')
ax2.plot(x, z, 'or')
ax2.set_title("Seno", fontweight='bold')
ax2.grid()

#plt.tight_layout() # Ajeita as proporções (colocou meu título mais acima)
plt.savefig(path+'figs\\subplotes_seno_cosseno.png')

# Exemplo usando 4 subplots

fig, ax = plt.subplots(2,2)

fig.suptitle("SENO", fontsize=16, fontweight='bold')

ax[0,0].plot(x, z, '-g')
ax[0,0].plot(x, z, 'og')
ax[0,0].set_title("ax[0,0]", fontweight='bold')
ax[0,0].grid()

ax[0,1].plot(x, z, '-r')
ax[0,1].plot(x, z, 'or')
ax[0,1].set_title("ax[0,1]", fontweight='bold')
ax[0,1].grid()

ax[1,0].plot(x, z, '-b')
ax[1,0].plot(x, z, 'ob')
ax[1,0].set_title("ax[1,0]", fontweight='bold')
ax[1,0].grid()

ax[1,1].plot(x, z, '-m')
ax[1,1].plot(x, z, 'om')
ax[1,1].set_title("ax[1,1]", fontweight='bold')
ax[1,1].grid()

plt.tight_layout() # Ajeita as proporções (colocou meu título mais acima)

# Exemplo usando 4 subplots

fig, ax = plt.subplots(2,2, figsize=(7,7))

fig.suptitle("SENO", fontsize=16, fontweight='bold')

ax[0,0].plot(x, z, '-g')
ax[0,0].plot(x, z, 'og')
ax[0,0].set_title("ax[0,0]", fontweight='bold')
ax[0,0].grid()

ax[0,1].plot(x, z, '-r')
ax[0,1].plot(x, z, 'or')
ax[0,1].set_title("ax[0,1]", fontweight='bold')
ax[0,1].grid()

ax[1,0].plot(x, z, '-b')
ax[1,0].plot(x, z, 'ob')
ax[1,0].set_title("ax[1,0]", fontweight='bold')
ax[1,0].grid()

ax[1,1].plot(x, z, '-m')
ax[1,1].plot(x, z, 'om')
ax[1,1].set_title("ax[1,1]", fontweight='bold')
ax[1,1].grid()

plt.tight_layout() # Ajeita as proporções (colocou meu título mais acima)
plt.savefig(path+'figs\\subplote_seno_2x2.png')

